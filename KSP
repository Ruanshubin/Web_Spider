#!/usr/bin/env python
# -*- coding: utf-8 -*-
#   Copyright 2018 Shubin Ruan <ruanshubin.top>
#   All rights reserved.
#   BSD license.
#
#
# Authors: Shubin Ruan <ruanshubin@hikvision.com>
# Created: 2018.07.27
#

"""
读取路网shp文件，生成DiGraph，计算节点间的KSP
"""

from itertools import islice
import networkx as nx
import shapefile 
import numpy as np
import pandas as pd


def shp2graph(file_name):
    """shp文件转为DiGraph
    
    参数
    ----------
    file_name: str shp文件的路径（相对或绝对） 如file_name = 'JingZhou//edges//edges.shp'
    
    返回
    ----------
    G: DiGraph 有向网络结构
    """
    
    G = nx.DiGraph()
    shape_obj = shapefile.Reader(file_name)
    lines_list = list(shape_obj.records())
    line_fields = shape_obj.fields
    columns = [example[0] for example in line_fields]
    del columns[0] # 第一项为fields标签，删除
    lines_df = pd.DataFrame(lines_list, columns = columns)
    # 遍历添加道路，oneway属性为True的添加两次（正、反）
    for i in range(lines_df.shape[0]):
        node_from = lines_df['from'][i]
        node_to = lines_df['to'][i]
        oneway = lines_df['oneway'][i]
        cost = lines_df['length'][i]
        if type(cost) != float:
            cost = float(cost)
        if oneway == 'True':
            G.add_edge(node_from, node_to, weight=cost)
        elif oneway == 'False':
            G.add_edge(node_from, node_to, weight=cost)
            G.add_edge(node_to, node_from, weight=cost)
        else:
            print '道路%d添加失败，请重新检查' %i
        # print '第%d条道路添加成功，望您知悉！' %i
    return G
    
def K_shortest_paths(G, source, target, K, weight=None):
    """K则最短路径算法
    
    参数
    ----------
    G: DiGraph 有向网络结构
    source: obj 起点
    target: obj 终点
    K: int 选取的路径数
    weight: str 权重的属性名 默认为'weight'
    
    返回
    ----------
    List: list 路径集合，路径长度由短到长排列
    """
    return list(islice(nx.shortest_simple_paths(G, source, target, weight=weight), K))
    
def sum_weight(G, path):
    """统计路径的weight和
    
    参数
    ----------
    G: DiGraph 构建好的有向网络结构
    path: list 单个路径中的点集合
    
    返回
    ----------
    weight_total: number 路径的weight和
    
    """
    weight_total = 0
    for i in range(len(path)-1):
        weight_total += float(G[path[i]][path[i+1]]['weight'])
    return weight_total
    
def test():
    """测试函数"""
    file_name = 'JingZhou//edges//edges.shp'
    G = shp2graph(file_name)
    source = '1091987146'   
    target = '1232620838'
    K_paths = K_shortest_paths(G, source, target, 50)
    for path in K_paths:
        weight_total = sum_weight(G, path)
        print '该路径的长度为%s米。' %(str(weight_total))
